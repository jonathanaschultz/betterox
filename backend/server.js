import express from 'express';import cors from 'cors';import mongoose from 'mongoose';import mongooseautoincrement from 'mongoose-auto-increment';import multer from 'multer';import path from 'path';const Schema = mongoose.Schema;var commentSchema = new Schema({	owner: {		type: String	},	comm: {		type: String	},	rating: {		type: String    }});var pnmSchema = new Schema({	pic: {		type: String,		default: 'default.png'	},	id: {		type: Number	},	checkin: {		type: [Date],		default: []	},	checkout: {		type: [Date],		default: []	},	name: {		type: String	},	year: {		type: String	},	email: {		type: String	},	phone: {		type: String	},	stat: {		type: String,		default: 'PNM'	},	comments: [commentSchema],	lencomments: {		type: Number,		default: 0	}	});var PNM;var Comment;const app = express();const router = express.Router();const storage = multer.diskStorage({  destination: (req, file, cb) => {    cb(null, 'uploads/')  },  filename: (req, file, cb) => {    cb(null, Date.now() + path.extname(file.originalname)) //Appending extension  }});app.use(cors());app.use(multer({storage: storage, limits: { fieldSize: 25 * 1024 * 1024 } }).single('pic'));app.use("/uploads", express.static(path.join(__dirname, 'uploads')));mongoose.connect('mongodb://localhost/pnm', { useNewUrlParser: true });const connection = mongoose.connection;connection.once('open', () => {	console.log('Connected to PNM database');	mongooseautoincrement.initialize(connection);	pnmSchema.plugin(mongooseautoincrement.plugin, {model: 'PNM', field: 'id', startAt: 1});	PNM = connection.model('PNM', pnmSchema);	Comment = connection.model('Comment', commentSchema);	console.log('Compiled schemas');});router.route('/pnms/add').post((req, res) => {	console.log('Adding new PNM');	let rushee = new PNM(req.body);	rushee.checkin.unshift(Date.now());	rushee.save()		.then(rushee => {			res.status(200).json({'PNM': 'PNM added successfully!'});		})		.catch(err => {			res.status(400).send('Failed to add to DB');		});});router.route('/pnms/edit/:id').post((req, res) => { //Add image uploading into here!	PNM.findOne({id: req.params.id}, (err, rushee) => {		if (!rushee || (!Object.keys(rushee).length))			res.status(400).send('Error finding PNM in DB');		else {			console.log('PNM found from DB search');			console.log('Editing PNM');			if (req.file)				rushee.pic = req.file.filename;			if (req.body.name)				rushee.name = req.body.name;			if (req.body.year)				rushee.year = req.body.year;			if (req.body.email)				rushee.email = req.body.email;			if (req.body.phone)				rushee.phone = req.body.phone;			if (req.body.stat)				rushee.stat = req.body.stat;			rushee.save().then(rushee => {				res.status(200).json({'Update': 'PNM updated successfully!'});			})			.catch(err => {				res.status(400).send('Failed to update PNM information');			});		}	});});router.route('/pnms/comment/:id').post((req, res) => {	PNM.findOne({id: req.params.id}, (err, rushee) => {		if (!rushee || (!Object.keys(rushee).length))			res.status(400).send('Error finding PNM in DB');		else {			console.log('PNM found from DB search');			console.log('Adding comment');			let comments = rushee.comments;			if (!Array.isArray(comments))				comments = new Array();			comments.unshift(new Comment(req.body));			rushee.comments = comments;			rushee.lencomments = comments.length;			rushee.save().then(rushee => {				res.status(200).json({'Comment': 'Comment added successfully!'});			})			.catch(err => {				res.status(400).send('Failed to add comment');			});		}	});});router.route('/pnms/checkout/:id').post((req, res) => {	PNM.findOne({id: req.params.id}, (err, rushee) => {		if (!rushee || (!Object.keys(rushee).length))			res.status(400).send('Error finding PNM in DB');		else {			console.log('PNM found from DB search');			console.log('Checking out');			rushee.checkout.unshift(Date.now());			rushee.save().then(rushee => {				res.status(200).json({'Check-out': 'Checkout time updated successfully!'});			})			.catch(err => {				res.status(400).send('Failed to add check-out time');			});		}	});});router.route('/pnms/checkin/:id').post((req, res) => {	PNM.findOne({id: req.params.id}, (err, rushee) => {		if (!rushee || (!Object.keys(rushee).length))			res.status(400).send('Error finding PNM in DB');		else {			console.log('PNM found from DB search');			console.log('Checking in');			rushee.checkin.unshift(Date.now());			rushee.save().then(rushee => {				res.status(200).json({'Check-in': 'Check-in time updated successfully!'});			})			.catch(err => {				res.status(400).send('Failed to add check-in time');			});		}	});});router.route('/pnms').get((req, res) => {	PNM.find((err, pnms) => {		if (err)			console.log(err);		else			res.json(pnms);	}).select("-comments");});router.route('/pnms/:id').get((req, res) => {	PNM.findOne({id: req.params.id}, (err, rushee) => {		if (!rushee || (!Object.keys(rushee).length))			res.status(400).send('Error finding PNM in DB');		else			res.json(rushee);	});});app.use('/', router);app.listen(4000, () => console.log('Server up and running'));